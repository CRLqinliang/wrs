import basis.dataadapter as da
from panda3d.core import NodePath, CollisionTraverser, CollisionHandlerQueue, BitMask32


class CollisionChecker(object):
    """
    A fast collision checker that allows maximum 32 collision pairs
    author: weiwei
    date: 20201214osaka
    """

    def __init__(self, name="auto"):
        self.ctrav = CollisionTraverser()
        self.chan = CollisionHandlerQueue()
        self.np = NodePath(name)
        self.nbitmask = 0 # capacity 1-30
        self._bitmask_ext = BitMask32(2**31) # 31 is prepared for cd with external objects
        self.lnks_inuse = [] # a list of collisionmodels for quick accessing the cd links

    def add_cdlnks(self, jlcobj, lnk_idlist):
        for id in lnk_idlist:
            if jlcobj.lnks[id]['cdprimit_cache'][1] is None:  # first time add
                jlcobj.lnks[id]['cdprimit_cache'][1] = jlcobj.lnks[id]['collisionmodel'].copy_cdnp_to(self.np)
                # All given lnk_idlist will be used for external cd detection
                jlcobj.lnks[id]['cdprimit_cache'][1].node().setFromCollideMask(self._bitmask_ext)
                self.ctrav.addCollider(jlcobj.lnks[id]['cdprimit_cache'][1], self.chan)
                self.lnks_inuse.append(jlcobj.lnks[id])
            else:
                raise ValueError("The link is already added!")

    def set_cdpair(self, fromlist, intolist):
        """
        :param fromlist: [[bool, cdprimit_cache], ...]
        :param intolist: [[bool, cdprimit_cache], ...]
        :return:
        author: weiwei
        date: 20201215
        """
        if self.nbitmask >= 30:
            raise ValueError("Too many collision pairs! Maximum: 29")
        cdmask = BitMask32(2 ** self.nbitmask)
        for cdprimit_cache in fromlist:
            if cdprimit_cache[1] is None:
                raise ValueError("The link needs to be added to collider using the addjlcobj function first!")
            current_from_cdmask = cdprimit_cache[1].node().getFromCollideMask()
            new_from_cdmask = current_from_cdmask | cdmask
            cdprimit_cache[1].node().setFromCollideMask(new_from_cdmask)
            # current_into_cdmask = cdprimit_cache[1].node().getIntoCollideMask()
            # cdprimit_cache[1].node().setIntoCollideMask(current_into_cdmask & ~cdmask)
        for cdprimit_cache in intolist:
            if cdprimit_cache[1] is None:
                raise ValueError("The link needs to be added to collider using the addjlcobj function first!")
            current_into_cdmask = cdprimit_cache[1].node().getIntoCollideMask()
            new_into_cdmask = current_into_cdmask | cdmask
            cdprimit_cache[1].node().setIntoCollideMask(new_into_cdmask)
        self.nbitmask += 1

    def add_objinhnd(self, objcm, rel_pos, rel_rotmat, intolist):
        obj_inhnd_info = {}
        obj_inhnd_info['collisionmodel'] = objcm # for reversed lookup
        obj_inhnd_info['gl_pos'] = objcm.get_pos()
        obj_inhnd_info['gl_rotmat'] = objcm.get_rotmat()
        obj_inhnd_info['rel_pos'] = rel_pos
        obj_inhnd_info['rel_rotmat'] = rel_rotmat
        obj_inhnd_info['cdprimit_cache'] = [False, objcm.copy_cdnp_to(self.np)]
        obj_inhnd_info['cdprimit_cache'][1].node().setFromCollideMask(self._bitmask_ext)
        obj_inhnd_info['intolist'] = intolist
        self.ctrav.addCollider(obj_inhnd_info['cdprimit_cache'][1], self.chan)
        self.lnks_inuse.append(obj_inhnd_info)
        self.set_cdpair([obj_inhnd_info['cdprimit_cache']], intolist)
        return obj_inhnd_info

    def delete_objinhnd(self, obj_inhnd_info):
        """
        :param obj_pretend_lnk: an lnk-like object generated by self.add_objinhnd
        :param objcm:
        :return:
        """
        self.lnks_inuse.remove(obj_inhnd_info)
        for cdprimit_cache in obj_inhnd_info['intolist']:
            current_into_cdmask = cdprimit_cache[1].node().getIntoCollideMask()
            new_into_cdmask = current_into_cdmask & ~obj_inhnd_info['cdprimit_cache'][1].node().getFromCollideMask()
            cdprimit_cache[1].node().setIntoCollideMask(new_into_cdmask)
        self.ctrav.removeCollider(obj_inhnd_info['cdprimit_cache'][1])

    def is_selfcollided(self):
        for one_lnkcdmodel in self.lnks_inuse: # TODO global ik indicator
            if one_lnkcdmodel['cdprimit_cache'][0]: # need to update
                pos = one_lnkcdmodel['gl_pos']
                rotmat = one_lnkcdmodel['gl_rotmat']
                one_lnkcdmodel['cdprimit_cache'][1].setMat(da.npv3mat3_to_pdmat4(pos, rotmat))
                one_lnkcdmodel['cdprimit_cache'][0] = False # updated
                # print("From", one_lnkcdmodel['cdprimit_cache'][1].node().getFromCollideMask())
                # print("Into", one_lnkcdmodel['cdprimit_cache'][1].node().getIntoCollideMask())
        self.ctrav.traverse(self.np)
        if self.chan.getNumEntries() > 0:
            self.ctrav.showCollisions(base.render)
            return True
        else:
            return False

    # def add_cdpair(self, jlobj0, lnk_idlist0, jlobj1, lnk_idlist1):
    #     """
    #     DEPRECATED, cannot handle links spanning multiple jlcobjects
    #     :param jlobj0:
    #     :param lnk_idlist0:
    #     :param jlobj1:
    #     :param lnk_idlist1:
    #     :return:
    #     """
    #     cdmask = BitMask32(2 ** len(self.cdpairs))
    #     for id in lnk_idlist0:
    #         if jlobj0.lnks[id]['cdprimit_cache'][1] is None: # first time add
    #             jlobj0.lnks[id]['cdprimit_cache'][1] = jlobj0.lnks[id]['collisionmodel'].copy_cdnp_to(self.np)
    #             jlobj0.lnks[id]['cdprimit_cache'][1].node().setFromCollideMask(cdmask)
    #             current_into_cdmask = jlobj0.lnks[id]['cdprimit_cache'][1].node().getIntoCollideMask()
    #             jlobj0.lnks[id]['cdprimit_cache'][1].node().setIntoCollideMask(current_into_cdmask & ~cdmask)
    #             self.ctrav.addCollider(jlobj0.lnks[id]['cdprimit_cache'][1], self.chan)
    #             self.lnks_inuse.append(jlobj0.lnks[id])
    #         else:
    #             current_from_cdmask = jlobj0.lnks[id]['cdprimit_cache'][1].node().getFromCollideMask()
    #             if current_from_cdmask == 0: # if was never added as collider
    #                 self.ctrav.addCollider(jlobj0.lnks[id]['cdprimit_cache'][1], self.chan)
    #             new_from_cdmask = current_from_cdmask | cdmask
    #             jlobj0.lnks[id]['cdprimit_cache'][1].node().setFromCollideMask(new_from_cdmask)
    #             current_into_cdmask = jlobj0.lnks[id]['cdprimit_cache'][1].node().getIntoCollideMask()
    #             jlobj0.lnks[id]['cdprimit_cache'][1].node().setIntoCollideMask(current_into_cdmask & ~new_from_cdmask)
    #     for id in lnk_idlist1:
    #         if jlobj1.lnks[id]['cdprimit_cache'][1] is None:
    #             jlobj1.lnks[id]['cdprimit_cache'][1] = jlobj1.lnks[id]['collisionmodel'].copy_cdnp_to(self.np)
    #             jlobj1.lnks[id]['cdprimit_cache'][1].node().setIntoCollideMask(cdmask)
    #             self.lnks_inuse.append(jlobj1.lnks[id])
    #         else:
    #             current_into_cdmask = jlobj1.lnks[id]['cdprimit_cache'][1].node().getIntoCollideMask()
    #             new_into_cdmask = current_into_cdmask | cdmask
    #             jlobj1.lnks[id]['cdprimit_cache'][1].node().setIntoCollideMask(new_into_cdmask)
    #     cdpair = {}
    #     cdpair['jlobj0'] = jlobj0
    #     cdpair['lnk_idlist0'] = lnk_idlist0
    #     cdpair['jlobj1'] = jlobj1
    #     cdpair['lnk_idlist1'] = lnk_idlist1
    #     self.cdpairs.append(cdpair)

    # def add_self_cdpair(self, fromlist, intolist):
    #     """
    #     :param fromlist: [[jlcobj, lnk_idlist], ...]
    #     :param intolist: [[jlcobj, lnk_idlist], ...]
    #     :return:
    #     author: weiwei
    #     date: 20201214
    #     """
    #     cdmask = BitMask32(2 ** len(self.cdpairs))
    #     for jlc_idlist in fromlist:
    #         jlcobj, lnk_idlist = jlc_idlist
    #         for id in lnk_idlist:
    #             if jlcobj.lnks[id]['cdprimit_cache'][1] is None: # first time add
    #                 jlcobj.lnks[id]['cdprimit_cache'][1] = jlcobj.lnks[id]['collisionmodel'].copy_cdnp_to(self.np)
    #                 jlcobj.lnks[id]['cdprimit_cache'][1].node().setFromCollideMask(cdmask)
    #                 current_into_cdmask = jlcobj.lnks[id]['cdprimit_cache'][1].node().getIntoCollideMask()
    #                 jlcobj.lnks[id]['cdprimit_cache'][1].node().setIntoCollideMask(current_into_cdmask & ~cdmask)
    #                 self.ctrav.addCollider(jlcobj.lnks[id]['cdprimit_cache'][1], self.chan)
    #                 self.lnks_inuse.append(jlcobj.lnks[id])
    #             else:
    #                 current_from_cdmask = jlcobj.lnks[id]['cdprimit_cache'][1].node().getFromCollideMask()
    #                 if current_from_cdmask == 0: # if was never added as collider
    #                     self.ctrav.addCollider(jlcobj.lnks[id]['cdprimit_cache'][1], self.chan)
    #                 new_from_cdmask = current_from_cdmask | cdmask
    #                 jlcobj.lnks[id]['cdprimit_cache'][1].node().setFromCollideMask(new_from_cdmask)
    #                 current_into_cdmask = jlcobj.lnks[id]['cdprimit_cache'][1].node().getIntoCollideMask()
    #                 jlcobj.lnks[id]['cdprimit_cache'][1].node().setIntoCollideMask(current_into_cdmask & ~new_from_cdmask)
    #     for jlc_idlist in intolist:
    #         jlcobj, lnk_idlist = jlc_idlist
    #         for id in lnk_idlist:
    #             if jlcobj.lnks[id]['cdprimit_cache'][1] is None:
    #                 jlcobj.lnks[id]['cdprimit_cache'][1] = jlcobj.lnks[id]['collisionmodel'].copy_cdnp_to(self.np)
    #                 jlcobj.lnks[id]['cdprimit_cache'][1].node().setIntoCollideMask(cdmask)
    #                 self.lnks_inuse.append(jlcobj.lnks[id])
    #             else:
    #                 current_into_cdmask = jlcobj.lnks[id]['cdprimit_cache'][1].node().getIntoCollideMask()
    #                 new_into_cdmask = current_into_cdmask | cdmask
    #                 jlcobj.lnks[id]['cdprimit_cache'][1].node().setIntoCollideMask(new_into_cdmask)
    #     cdpair = {}
    #     cdpair['fromlist'] = fromlist
    #     cdpair['tolist'] = intolist
    #     self.cdpairs.append(cdpair)

    def disable(self):
        """
        clear pairs and nodepath
        :return:
        """
        for one_lnkcdmodel in self.lnks_inuse:
            one_lnkcdmodel['cdprimit_cache'][1].removeNode()
            one_lnkcdmodel['cdprimit_cache'][1] = None
        pass


# if __name__ == '__main__':
#     cdmask1 = BitMask32(2**1)
#     cdmask2 = BitMask32(2**2)
#     cdmask3 = BitMask32(2**3)
#     print(cdmask1, cdmask2, cdmask1 | cdmask3)
