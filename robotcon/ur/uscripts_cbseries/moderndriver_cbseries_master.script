def driverProg():
	SERVO_IDLE = 0
	SERVO_RUNNING = 1
	cmd_servo_state = SERVO_IDLE
	cmd_servo_q = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]

	def set_servo_setpoint(q):
		enter_critical
		cmd_servo_state = SERVO_RUNNING
		cmd_servo_q = q
		exit_critical
	end

	thread servoThread():
		state = SERVO_IDLE
		while True:
			enter_critical
			q = cmd_servo_q
			do_brake = False
			if (state == SERVO_RUNNING) and (cmd_servo_state == SERVO_IDLE):
				do_brake = True
			end
			state = cmd_servo_state
			cmd_servo_state = SERVO_IDLE
			exit_critical
			if do_brake:
				stopj(1.0)
				sync()
			elif state == SERVO_RUNNING:
				# textmsg(q)
				servoj(q)
			else:
				sync()
			end
		end
	end

	socket_open('parameter_pc_ip', parameter_pc_port, 'pc_socket')
	textmsg('open pc connection')
    modbus_add_signal("parameter_slave_ip", 0, 200, 3, "conf_counter_feedback")
	textmsg('open modbus feedback from slave')
	thread_servo = run servoThread()
    sqrt_scaler = sqrt(parameter_jointscaler)
	keepalive = 1
	conf_counter = 0
	while keepalive > 0:
		# textmsg('preparing to read')
		# textmsg(keepalive)
		params_mult = socket_read_binary_integer('pc_socket', 12+1)
		if params_mult[0] > 0:
			q_master = [params_mult[1]/parameter_jointscaler,
				        params_mult[2]/parameter_jointscaler,
				        params_mult[3]/parameter_jointscaler,
				        params_mult[4]/parameter_jointscaler,
				        params_mult[5]/parameter_jointscaler,
				        params_mult[6]/parameter_jointscaler]
			keepalive = params_mult[13]
			q_slave = [params_mult[7],
				       params_mult[8],
				       params_mult[9],
				       params_mult[10],
				       params_mult[11],
				       params_mult[12]]
	        # base
		    base_sgn = 1
		    if q_slave[0]<0:
		        base_sgn = -1
		    base_abs_value = base_sgn*q_salve[0]
            base_l_value = base_abs_value % sqrt_scaler
            base_u_value = floor(base_abs_value / sqrt_scaler)
            # shoulder
		    shoulder_sgn = 1
		    if q_slave[1]<0:
		        shoulder_sgn = -1
		    shoulder_abs_value = shoulder_sgn*q_salve[0]
            shoulder_l_value = shoulder_abs_value % sqrt_scaler
            shoulder_u_value = floor(shoulder_abs_value / sqrt_scaler)
            # elbow
		    elbow_sgn = 1
		    if q_slave[2]<0:
		        elbow_sgn = -1
		    elbow_abs_value = elbow_sgn*q_salve[0]
            elbow_l_value = elbow_abs_value % sqrt_scaler
            elbow_u_value = floor(elbow_abs_value / sqrt_scaler)
            # wrist1
		    wrist1_sgn = 1
		    if q_slave[3]<0:
		        wrist1_sgn = -1
		    wrist1_abs_value = wrist1_sgn*q_salve[0]
            wrist1_l_value = wrist1_abs_value % sqrt_scaler
            wrist1_u_value = floor(wrist1_abs_value / sqrt_scaler)
            # wrist2
		    wrist2_sgn = 1
		    if q_slave[4]<0:
		        wrist2_sgn = -1
		    wrist2_abs_value = wrist2_sgn*q_salve[0]
            wrist2_l_value = wrist2_abs_value % sqrt_scaler
            wrist2_u_value = floor(wrist2_abs_value / sqrt_scaler)
            # wrist3
		    wrist3_sgn = 1
		    if q_slave[5]<0:
		        wrist3_sgn = -1
		    wrist3_abs_value = wrist3_sgn*q_salve[0]
            wrist3_l_value = wrist3_abs_value % sqrt_scaler
            wrist3_u_value = floor(wrist3_abs_value / sqrt_scaler)
            write_port_register(255, base_l)
            write_port_register(254, base_u)
            write_port_register(253, base_sgn)
            write_port_register(252, shoulder_l)
            write_port_register(251, shoulder_u)
            write_port_register(250, shoulder_sgn)
            write_port_register(249, elbow_l)
            write_port_register(248, elbow_u)
            write_port_register(247, elbow_sgn)
            write_port_register(246, wrist1_l)
            write_port_register(245, wrist1_u)
            write_port_register(244, wrist1_sgn)
            write_port_register(243, wrist2_l)
            write_port_register(242, wrist2_u)
            write_port_register(241, wrist2_sgn)
            write_port_register(240, wrist3_l)
            write_port_register(239, wrist3_u)
            write_port_register(238, wrist3_sgn)
            conf_counter += 1
            write_port_register(200, conf_counter)
			set_servo_setpoint(q)
			while True:
			    if modbus_get_signal_status("conf_counter_feedback", False) == conf_counter:
			        break
                end
                sleep(.001)
            end
	        sync()
		end
	end
	sync()
	socket_close()
	kill thread_servo
end